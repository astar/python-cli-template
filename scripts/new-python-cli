#!/bin/bash

# new-python-cli - Create a new Python CLI project from template
# Usage: new-python-cli <project-name> [--public]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DEFAULT_PROJECT_DIR="$HOME/project"
TEMPLATE_REPO="astar/python-cli-template"

# Functions
print_usage() {
    echo "Usage: $0 <project-name> [--public]"
    echo ""
    echo "Creates a new Python CLI project from template in $DEFAULT_PROJECT_DIR"
    echo ""
    echo "Options:"
    echo "  --public    Create public repository (default: private)"
    echo "  --help      Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 my-awesome-cli"
    echo "  $0 my-public-tool --public"
}

print_step() {
    echo -e "${BLUE}==>${NC} $1"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1" >&2
}

validate_project_name() {
    local name="$1"

    # Check if name is empty
    if [[ -z "$name" ]]; then
        print_error "Project name cannot be empty"
        return 1
    fi

    # Check if name contains only valid characters (lowercase letters, numbers, hyphens)
    if [[ ! "$name" =~ ^[a-z0-9-]+$ ]]; then
        print_error "Project name can only contain lowercase letters, numbers, and hyphens"
        return 1
    fi

    # Check if name starts/ends with hyphen
    if [[ "$name" =~ ^- ]] || [[ "$name" =~ -$ ]]; then
        print_error "Project name cannot start or end with a hyphen"
        return 1
    fi

    return 0
}

check_requirements() {
    # Check if gh CLI is installed
    if ! command -v gh &> /dev/null; then
        print_error "GitHub CLI (gh) is not installed"
        echo "Install it with: brew install gh"
        exit 1
    fi

    # Check if gh is authenticated
    if ! gh auth status &> /dev/null; then
        print_error "GitHub CLI is not authenticated"
        echo "Run: gh auth login"
        exit 1
    fi

    # Check if uv is installed
    if ! command -v uv &> /dev/null; then
        print_warning "UV is not installed. Install it with: curl -LsSf https://astral.sh/uv/install.sh | sh"
    fi
}

# Main function
main() {
    local project_name=""
    local visibility="--private"

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --public)
                visibility="--public"
                shift
                ;;
            --help)
                print_usage
                exit 0
                ;;
            -*)
                print_error "Unknown option: $1"
                print_usage
                exit 1
                ;;
            *)
                if [[ -z "$project_name" ]]; then
                    project_name="$1"
                else
                    print_error "Too many arguments"
                    print_usage
                    exit 1
                fi
                shift
                ;;
        esac
    done

    # Check if project name is provided
    if [[ -z "$project_name" ]]; then
        print_error "Project name is required"
        print_usage
        exit 1
    fi

    # Validate project name
    if ! validate_project_name "$project_name"; then
        exit 1
    fi

    # Check requirements
    check_requirements

    # Create project directory if it doesn't exist
    if [[ ! -d "$DEFAULT_PROJECT_DIR" ]]; then
        print_step "Creating project directory: $DEFAULT_PROJECT_DIR"
        mkdir -p "$DEFAULT_PROJECT_DIR"
    fi

    # Change to project directory
    cd "$DEFAULT_PROJECT_DIR"

    # Check if project already exists
    if [[ -d "$project_name" ]]; then
        print_error "Directory $DEFAULT_PROJECT_DIR/$project_name already exists"
        exit 1
    fi

    print_step "Creating new Python CLI project: $project_name"

    # Create repository from template
    if gh repo create "$project_name" --template "$TEMPLATE_REPO" "$visibility" --clone; then
        print_success "Repository created successfully"
    else
        print_error "Failed to create repository"
        exit 1
    fi

    # Change to project directory
    cd "$project_name"

    print_step "Customizing project template..."

    # Run the customization script
    if [[ -f "scripts/customize-template" ]]; then
        if bash scripts/customize-template "$project_name"; then
            print_success "Template customized successfully"
        else
            print_error "Failed to customize template"
            exit 1
        fi
    else
        print_warning "Customization script not found, manual setup required"
    fi

    print_step "Setting up development environment..."

    # Initialize UV and install dependencies if uv is available
    if command -v uv &> /dev/null; then
        if make setup; then
            print_success "Development environment set up"
        else
            print_warning "Failed to set up development environment automatically"
        fi
    else
        print_warning "UV not available, skipping automatic setup"
    fi

    echo ""
    print_success "Project created successfully!"
    echo ""
    echo -e "${BLUE}Project location:${NC} $DEFAULT_PROJECT_DIR/$project_name"
    echo -e "${BLUE}GitHub repository:${NC} https://github.com/$(gh api user --jq .login)/$project_name"
    echo ""
    echo -e "${YELLOW}Next steps:${NC}"
    echo "  cd $DEFAULT_PROJECT_DIR/$project_name"
    if ! command -v uv &> /dev/null; then
        echo "  make setup          # Set up development environment"
    fi
    echo "  make check          # Run all quality checks"
    echo "  make run            # Test the CLI"
    echo ""
}

# Run main function with all arguments
main "$@"
