[project]
name = "dmx-music-analyzer"
version = "0.1.0"
description = "DMX lighting control system with music analysis for sauna environments"
authors = [{ name = "Jarda", email = "jarda@example.com" }]
requires-python = ">=3.12,<4.0"
license = "MIT"
readme = "README.md"
keywords = ["dmx", "lighting", "music", "sauna", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "click>=8.2.0",               # CLI framework
    "pydantic[email]>=2.11.4",   # Data validation
    "pydantic-settings>=2.9.1",  # Settings management
    "rich>=13.0.0",               # Terminal formatting
    "typer>=0.12.0",              # Alternative to Click
    "librosa>=0.10.0",            # Audio analysis
    "numpy>=1.24.0",              # Numerical computing
    "scipy>=1.10.0",              # Scientific computing
    "mutagen>=1.47.0",            # Audio metadata
    "configparser>=5.3.0",        # INI file parsing
    "pygame>=2.5.0",              # Real-time visualization
]

[project.scripts]
dmx-analyzer = "dmx_analyzer.__main__:main"

[project.urls]
Homepage = "https://github.com/jarda/dmx-music-analyzer"
Documentation = "https://dmx-music-analyzer.readthedocs.io"
Repository = "https://github.com/jarda/dmx-music-analyzer"
Issues = "https://github.com/jarda/dmx-music-analyzer/issues"

[dependency-groups]
dev = [
    "ruff>=0.11.12",              # Linting & formatting
    "mypy>=1.15.0",               # Type checking
    "pytest>=8.3.5",             # Testing framework
    "pytest-asyncio>=0.26.0",    # Async testing
    "pytest-cov>=6.1.1",         # Coverage reporting
    "pytest-mock>=3.14.0",       # Mocking
    "pre-commit>=3.8.0",         # Git hooks
    "sphinx>=8.2.3",             # Documentation
    "sphinx-rtd-theme>=2.0.0",   # Documentation theme
    "types-requests>=2.31.0",    # Type stubs
    "ipython>=8.0.0",            # Development REPL
    "ipdb>=0.13.13",             # Debugger
]
test = [
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "httpx>=0.28.1",
]
docs = [
    "sphinx>=8.2.3",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=3.0.0",        # Markdown support
]

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/dmx_analyzer"]

# Testing Configuration
[tool.pytest.ini_options]
addopts = "--doctest-modules --cov=dmx_analyzer --cov-report=html --cov-report=term --cov-report=xml"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests", "src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Type Checking Configuration
[tool.mypy]
python_version = "3.12"
plugins = ["pydantic.mypy"]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true
enable_error_code = ["truthy-bool", "redundant-expr", "unused-awaitable"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
